# import asyncio
# import uvicorn
# import api
# from bot import bot
#
#
# async def on_shutdown(dp):
#     await dp.storage.close()
#     await dp.storage.wait_closed()
#
#
# if __name__ == "__main__":
#     loop = asyncio.get_event_loop()
#     tasks = [
#         loop.create_task(uvicorn.run(api.app, host="0.0.0.0", port=8000)),
#         loop.create_task(bot.dp.start_polling(bot, on_shutdown=on_shutdown))
#     ]
#     loop.run_until_complete(asyncio.gather(*tasks))


import asyncio
import uvicorn
import os
from fastapi import FastAPI
from aiogram import Dispatcher, Bot
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Dispatcher
token = os.environ.get('TOKEN')
chat_id = os.environ.get('CHAT_ID')
dp = Dispatcher()
bot = Bot(token)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_message(message):
    for i in eval(chat_id):
        await bot.send_message(chat_id=i, text=message)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ FastAPI
@app.post("/send_data/")
async def get_data(name: str, number: int):
    result = f"Received name: {name}, number: {number}"
    await send_message(f"üü¢–ü–æ–ª—É—á–µ–Ω–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–∏–º—è: {name}\n–Ω–æ–º–µ—Ä: {number}")
    return {"message": result}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def on_shutdown(dp):
    await dp.storage.close()
    await dp.storage.wait_closed()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    tasks = [
        loop.create_task(uvicorn.run(app='__main__:app', host="0.0.0.0", port=8000, workers=2, reload=True)),
        loop.create_task(bot.dp.start_polling(bot, on_shutdown=on_shutdown))
    ]
    loop.run_until_complete(asyncio.gather(*tasks))